
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Snake Game</title>
  <style>
    body {
        background: url(img/bg.jpg);
        background-size: cover;
        /* background-repeat: no-repeat; */
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      height: 100vh;
      width: 100%;
      margin: 0;
      background-color: #222;
      color: #fff;
      font-family: 'Arial', sans-serif;
    }

    #game-info {
      margin-bottom: 20px;
    }

    #game-container {
      position: relative;
    }

    #game-board {
      display: grid;
      grid-template-columns: repeat(20, 20px);
      gap: 1px;
      position: relative;
      z-index: 1;
      border: 1px solid #fff; /* Update border size to 1px */
    }

    .cell {
      width: 20px;
      height: 20px;
      background-color: #333;
      box-sizing: border-box; /* Include borders in width and height calculation */
    }

    .snake {
      background-color: #0f0;
    }

    .food {
      background-color: #f00;
    }
  </style>
</head>
<body>
    <div id="game-logo">
        <h1>MBT-webhouse</h1>
        <span>© all rights are reserved by MBT</span>
      </div>
  <div id="game-info">
    <p>Score: <span id="score">0</span></p>
    <p>High Score: <span id="high-score">0</span></p>
    <label for="speed">Speed:</label>
    <input type="number" id="speed" value="100" min="50" max="500" step="10">
  </div>
  <div id="game-container">
    <div id="game-board"></div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const board = document.getElementById('game-board');
      const scoreElement = document.getElementById('score');
      const highScoreElement = document.getElementById('high-score');
      const speedInput = document.getElementById('speed');
      const gridSize = 20;
      const snake = [{ x: 10, y: 10 }];
      let direction = 'right';
      let food = { x: 5, y: 5 };
      let score = 0;
      let highScore = 0;
      let speed = parseInt(speedInput.value);

      function createBoard() {
        for (let row = 0; row < gridSize; row++) {
          for (let col = 0; col < gridSize; col++) {
            const cell = document.createElement('div');
            cell.classList.add('cell');
            board.appendChild(cell);
          }
        }
      }

      function renderSnake() {
        const cells = document.querySelectorAll('.cell');
        cells.forEach(cell => cell.classList.remove('snake'));

        snake.forEach(segment => {
          const index = segment.x + segment.y * gridSize;
          cells[index].classList.add('snake');
        });
      }

      function renderFood() {
        const index = food.x + food.y * gridSize;
        const cell = document.querySelectorAll('.cell')[index];
        cell.classList.add('food');
      }

      function moveSnake() {
        const head = { ...snake[0] };

        switch (direction) {
          case 'up':
            head.y = (head.y - 1 + gridSize) % gridSize;
            break;
          case 'down':
            head.y = (head.y + 1) % gridSize;
            break;
          case 'left':
            head.x = (head.x - 1 + gridSize) % gridSize;
            break;
          case 'right':
            head.x = (head.x + 1) % gridSize;
            break;
        }

        snake.unshift(head);

        if (head.x === food.x && head.y === food.y) {
          generateFood();
          updateScore();
        } else {
          snake.pop();
        }

        // No need to check collision
      }

      function generateFood() {
        food.x = Math.floor(Math.random() * gridSize);
        food.y = Math.floor(Math.random() * gridSize);
      }

      function updateScore() {
        score++;
        scoreElement.innerText = score;

        if (score > highScore) {
          highScore = score;
          highScoreElement.innerText = highScore;
        }

        // Slow down the speed gradually
        if (speed > 50) {
          speed -= 2;
        }
      }

      function resetGame() {
        snake.length = 1;
        snake[0] = { x: 10, y: 10 };
        direction = 'right';
        generateFood();
        score = 0;
        scoreElement.innerText = score;
        speed = parseInt(speedInput.value);
      }

      document.addEventListener('keydown', (event) => {
        switch (event.key) {
          case 'ArrowUp':
            direction = 'up';
            break;
          case 'ArrowDown':
            direction = 'down';
            break;
          case 'ArrowLeft':
            direction = 'left';
            break;
          case 'ArrowRight':
            direction = 'right';
            break;
        }
      });

      speedInput.addEventListener('input', () => {
        speed = parseInt(speedInput.value);
      });

      createBoard();
      generateFood();

      setInterval(() => {
        moveSnake();
        renderSnake();
        renderFood();
      }, speed);
    });
  </script>
</body>
</html>




================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Snake Game</title>
  <style>
    body {
      background: url(img/bg.jpg);
      background-size: cover;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      height: 100vh;
      width: 100%;
      margin: 0;
      color: #fff;
      font-family: 'Arial', sans-serif;
    }

    #game-logo {
      max-width: 100%;
      margin-bottom: 20px;
      text-align: center;
    }

    #game-info {
      margin-bottom: 20px;
    }

    #game-container {
      position: relative;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    #game-board {
      display: flex;
      flex-wrap: wrap;
      gap: 1px;
      border: 1px solid #fff; /* Update border size to 1px */
    }

    .cell {
      flex: 1 0 calc(5% - 1px);
      height: 0;
      padding-bottom: calc(5% - 1px);
      background-color: #333;
      box-sizing: border-box; /* Include borders in width and height calculation */
    }

    .snake {
      background-color: #0f0;
    }

    .food {
      background-color: #f00;
    }

    footer {
      margin-top: 20px;
      text-align: center;
    }
  </style>
</head>
<body>
  <div id="game-logo">
    <h1>MBT-webhouse</h1>
    <span>© all rights are reserved by MBT</span>
  </div>
  <div id="game-info">
    <p>Score: <span id="score">0</span></p>
    <p>High Score: <span id="high-score">0</span></p>
    <label for="speed">Speed:</label>
    <input type="number" id="speed" value="100" min="50" max="500" step="10">
  </div>
  <div id="game-container">
    <div id="game-board"></div>
  </div>

  <footer>
    <p>&copy; 2023 MBT-webhouse. All rights reserved.</p>
  </footer>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const board = document.getElementById('game-board');
      const scoreElement = document.getElementById('score');
      const highScoreElement = document.getElementById('high-score');
      const speedInput = document.getElementById('speed');
      const gridSize = 20;
      const snake = [{ x: 10, y: 10 }];
      let direction = 'right';
      let food = { x: 5, y: 5 };
      let score = 0;
      let highScore = 0;
      let speed = parseInt(speedInput.value);

      function createBoard() {
        for (let i = 0; i < gridSize * gridSize; i++) {
          const cell = document.createElement('div');
          cell.classList.add('cell');
          board.appendChild(cell);
        }
      }

      function renderSnake() {
        const cells = document.querySelectorAll('.cell');
        cells.forEach(cell => cell.classList.remove('snake'));

        snake.forEach(segment => {
          const index = segment.x + segment.y * gridSize;
          cells[index].classList.add('snake');
        });
      }

      function renderFood() {
        const index = food.x + food.y * gridSize;
        const cell = document.querySelectorAll('.cell')[index];
        cell.classList.add('food');
      }

      function moveSnake() {
        const head = { ...snake[0] };

        switch (direction) {
          case 'up':
            head.y = (head.y - 1 + gridSize) % gridSize;
            break;
          case 'down':
            head.y = (head.y + 1) % gridSize;
            break;
          case 'left':
            head.x = (head.x - 1 + gridSize) % gridSize;
            break;
          case 'right':
            head.x = (head.x + 1) % gridSize;
            break;
        }

        snake.unshift(head);

        if (head.x === food.x && head.y === food.y) {
          generateFood();
          updateScore();
        } else {
          snake.pop();
        }

        // No need to check collision
      }

      function generateFood() {
        food.x = Math.floor(Math.random() * gridSize);
        food.y = Math.floor(Math.random() * gridSize);
      }

      function updateScore() {
        score++;
        scoreElement.innerText = score;

        if (score > highScore) {
          highScore = score;
          highScoreElement.innerText = highScore;
        }

        // Slow down the speed gradually
        if (speed > 50) {
          speed -= 2;
        }
      }

      function resetGame() {
        snake.length = 1;
        snake[0] = { x: 10, y: 10 };
        direction = 'right';
        generateFood();
        score = 0;
        scoreElement.innerText = score;
        speed = parseInt(speedInput.value);
      }

      document.addEventListener('keydown', (event) => {
        switch (event.key) {
          case 'ArrowUp':
            direction = 'up';
            break;
          case 'ArrowDown':
            direction = 'down';
            break;
          case 'ArrowLeft':
            direction = 'left';
            break;
          case 'ArrowRight':
            direction = 'right';
            break;
        }
      });

      speedInput.addEventListener('input', () => {
        speed = parseInt(speedInput.value);
      });

      createBoard();
      generateFood();

      setInterval(() => {
        moveSnake();
        renderSnake();
        renderFood();
      }, speed);
    });
  </script>
</body>
</html>